<!-- views/partials/head.ejs -->
<meta charset="UTF-8">

<!-- CSS (load bootstrap from a CDN) -->
<style>
    body { 
    	padding-top:50px;
    	background-color: black;
    }
    h2 { color: rgb(0, 255, 0); }
    p, label, td, h2 { font-size: 11px; color: rgb(0, 255, 0); }
    thead td { font-size: 16px; }
    .admin {
    	width: 85%;
    	margin-left: auto;
    	margin-right: auto;
    }
    .useragent {
    	white-space: nowrap;
    	overflow: hidden;
    	text-overflow: ellipsis;
    	max-width: 200px;
    }
    table {
    	border-collapse: collapse;
	}
	table td, table th {
	    border: 1px solid rgb(0,255,0);
	}
	/*table tr:first-child th {
	    border-top: 0;
	}
	table tr:last-child td {
	    border-bottom: 0;
	}
	table tr td:first-child,
	table tr th:first-child {
	    border-left: 0;
	}
	table tr td:last-child,
	table tr th:last-child {
	    border-right: 0;
	}*/
</style>

<script>
	/**
 * Helper function for POSTing data as JSON with fetch.
 *
 * @param {Object} options
 * @param {string} options.url - URL to POST data to
 * @param {FormData} options.formData - `FormData` instance
 * @return {Object} - Response body from URL that was POSTed to
 */
var postFormDataAsJson = async({
  url,
  formData
}) => {
  const plainFormData = Object.fromEntries(formData.entries());
  const formDataJsonString = JSON.stringify(plainFormData);

  const fetchOptions = {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Accept: "application/json",
    },
    body: formDataJsonString,
  };

  console.log("about to post" + formDataJsonString)
  const response = await fetch(url, fetchOptions);

  if (!response.ok) {
    const errorMessage = await response.text();
    throw new Error(errorMessage);
  }

  return response.json();
}
/**
 * Event handler for a form submit event.
 * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/submit_event
 * @example const exampleForm = document.getElementById("example-form");
 *          exampleForm.addEventListener("submit", handleFormSubmit);
 * @param {SubmitEvent} event
 */
var handleFormSubmit = async(event) => {
  event.preventDefault();
  const form = event.currentTarget;
  const url = form.action;

  try {
    const formData = new FormData(form);
    const responseData = await postFormDataAsJson({
      url,
      formData
    });
    console.log({
      responseData
    });
  } catch (error) {
    console.error(error);
  }
}
</script>